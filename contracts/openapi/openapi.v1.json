{
  "openapi": "3.1.0",
  "info": {
    "title": "Taxonomy Service API",
    "version": "1.0.0",
    "description": "Entity-specific taxonomies and categorization system for events, venues, and content across the platform. Provides hierarchical classification, tagging, and semantic relationships enabling intelligent search, discovery, and recommendation features.",
    "contact": {
      "name": "Eventzr Platform Team",
      "url": "https://docs.eventzr.com/services/taxonomy"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://eventzr.com/license"
    }
  },
  "servers": [
    {
      "url": "https://api.eventzr.com/v1/taxonomy",
      "description": "Production server"
    },
    {
      "url": "https://staging.api.eventzr.com/v1/taxonomy",
      "description": "Staging server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from auth service (port 3100)"
      }
    },
    "schemas": {
      "TaxonomyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique taxonomy identifier"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "description": "Tenant identifier for multi-tenancy"
          },
          "namespace": {
            "type": "string",
            "description": "Logical namespace for taxonomy grouping",
            "enum": ["events", "venues", "services", "content", "users", "brands", "destinations", "campaigns", "tours", "skills", "interests", "time", "price", "quality", "geo-political", "cultural", "industry"]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Human-readable taxonomy name"
          },
          "slug": {
            "type": "string",
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly identifier"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Detailed taxonomy description"
          },
          "version": {
            "type": "integer",
            "minimum": 1,
            "description": "Taxonomy version for change management"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "active", "deprecated", "archived"],
            "description": "Taxonomy lifecycle status"
          },
          "is_system": {
            "type": "boolean",
            "description": "Whether this is a system-managed taxonomy"
          },
          "is_hierarchical": {
            "type": "boolean",
            "description": "Whether this taxonomy supports hierarchical categories"
          },
          "max_depth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 8,
            "default": 6,
            "description": "Maximum hierarchy depth allowed"
          },
          "metadata": {
            "type": "object",
            "description": "Additional taxonomy metadata",
            "additionalProperties": true
          },
          "categories_count": {
            "type": "integer",
            "description": "Total number of categories in this taxonomy"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "description": "Creator user ID"
          },
          "updated_by": {
            "type": "string",
            "format": "uuid",
            "description": "Last updater user ID"
          }
        },
        "required": ["id", "tenant_id", "namespace", "name", "slug", "version", "status", "is_system", "is_hierarchical", "created_at", "updated_at"]
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique category identifier"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "description": "Tenant identifier for multi-tenancy"
          },
          "taxonomy_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent taxonomy ID"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Parent category ID for hierarchy"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Category name"
          },
          "slug": {
            "type": "string",
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly identifier"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Category description"
          },
          "level": {
            "type": "integer",
            "minimum": 0,
            "description": "Hierarchy level (0 = root)"
          },
          "path": {
            "type": "string",
            "description": "Materialized path for hierarchy navigation"
          },
          "sort_order": {
            "type": "integer",
            "default": 0,
            "description": "Display order within siblings"
          },
          "is_leaf": {
            "type": "boolean",
            "description": "Whether this category has children"
          },
          "is_active": {
            "type": "boolean",
            "default": true,
            "description": "Whether category is available for use"
          },
          "ai_generated": {
            "type": "boolean",
            "default": false,
            "description": "Whether this category was AI-generated"
          },
          "confidence_score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "AI confidence score if AI-generated"
          },
          "usage_count": {
            "type": "integer",
            "description": "Number of entities classified in this category"
          },
          "metadata": {
            "type": "object",
            "description": "Additional category metadata",
            "additionalProperties": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponse"
            },
            "description": "Child categories if requested"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        },
        "required": ["id", "tenant_id", "taxonomy_id", "name", "slug", "level", "path", "sort_order", "is_leaf", "is_active", "ai_generated", "created_at", "updated_at"]
      },
      "ClassificationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique classification identifier"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "description": "Tenant identifier"
          },
          "entity_type": {
            "type": "string",
            "description": "Type of entity being classified",
            "enum": ["event", "venue", "user", "team", "brand", "destination", "campaign", "tour", "content", "service", "product", "skill", "interest"]
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity being classified"
          },
          "category_id": {
            "type": "string",
            "format": "uuid",
            "description": "Category assigned to entity"
          },
          "confidence_score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Classification confidence (0-1)"
          },
          "assigned_by": {
            "type": "string",
            "enum": ["system", "user", "ai", "import"],
            "description": "How this classification was assigned"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "confirmed", "rejected", "expired"],
            "description": "Classification status"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Optional expiration time for temporary classifications"
          },
          "metadata": {
            "type": "object",
            "description": "Additional classification metadata",
            "additionalProperties": true
          },
          "category": {
            "$ref": "#/components/schemas/CategoryResponse",
            "description": "Full category details if requested"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        },
        "required": ["id", "tenant_id", "entity_type", "entity_id", "category_id", "confidence_score", "assigned_by", "status", "created_at", "updated_at"]
      },
      "CreateTaxonomyRequest": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Logical namespace for taxonomy grouping",
            "enum": ["events", "venues", "services", "content", "users", "brands", "destinations", "campaigns", "tours", "skills", "interests", "time", "price", "quality", "geo-political", "cultural", "industry"]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Human-readable taxonomy name"
          },
          "slug": {
            "type": "string",
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly identifier (auto-generated if not provided)"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Detailed taxonomy description"
          },
          "is_hierarchical": {
            "type": "boolean",
            "default": true,
            "description": "Whether this taxonomy supports hierarchical categories"
          },
          "max_depth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 8,
            "default": 6,
            "description": "Maximum hierarchy depth allowed"
          },
          "metadata": {
            "type": "object",
            "description": "Additional taxonomy metadata",
            "additionalProperties": true
          }
        },
        "required": ["namespace", "name"]
      },
      "UpdateTaxonomyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Human-readable taxonomy name"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Detailed taxonomy description"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "active", "deprecated", "archived"],
            "description": "Taxonomy lifecycle status"
          },
          "max_depth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 8,
            "description": "Maximum hierarchy depth allowed"
          },
          "metadata": {
            "type": "object",
            "description": "Additional taxonomy metadata",
            "additionalProperties": true
          }
        }
      },
      "CreateCategoryRequest": {
        "type": "object",
        "properties": {
          "taxonomy_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent taxonomy ID"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Parent category ID for hierarchy"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Category name"
          },
          "slug": {
            "type": "string",
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly identifier (auto-generated if not provided)"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Category description"
          },
          "sort_order": {
            "type": "integer",
            "default": 0,
            "description": "Display order within siblings"
          },
          "metadata": {
            "type": "object",
            "description": "Additional category metadata",
            "additionalProperties": true
          }
        },
        "required": ["taxonomy_id", "name"]
      },
      "ClassifyEntityRequest": {
        "type": "object",
        "properties": {
          "entity_type": {
            "type": "string",
            "description": "Type of entity being classified",
            "enum": ["event", "venue", "user", "team", "brand", "destination", "campaign", "tour", "content", "service", "product", "skill", "interest"]
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity being classified"
          },
          "category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "maxItems": 10,
            "description": "Categories to assign to entity"
          },
          "confidence_score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1.0,
            "description": "Classification confidence (0-1)"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optional expiration time for temporary classifications"
          },
          "metadata": {
            "type": "object",
            "description": "Additional classification metadata",
            "additionalProperties": true
          }
        },
        "required": ["entity_type", "entity_id", "category_ids"]
      },
      "AIClassifyRequest": {
        "type": "object",
        "properties": {
          "entity_type": {
            "type": "string",
            "description": "Type of entity being classified",
            "enum": ["event", "venue", "user", "team", "brand", "destination", "campaign", "tour", "content", "service", "product", "skill", "interest"]
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity being classified"
          },
          "content": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Entity title"
              },
              "description": {
                "type": "string",
                "description": "Entity description"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Existing tags"
              },
              "metadata": {
                "type": "object",
                "description": "Additional entity metadata",
                "additionalProperties": true
              }
            },
            "description": "Content to analyze for classification"
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Limit classification to specific namespaces"
          },
          "min_confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 0.7,
            "description": "Minimum confidence threshold for suggestions"
          },
          "max_suggestions": {
            "type": "integer",
            "minimum": 1,
            "maximum": 20,
            "default": 5,
            "description": "Maximum number of classification suggestions"
          }
        },
        "required": ["entity_type", "entity_id", "content"]
      },
      "BulkOperationRequest": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "enum": ["classify", "reclassify", "remove_classification", "update_categories"],
            "description": "Bulk operation type"
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "entity_type": {
                  "type": "string"
                },
                "entity_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "category_ids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "required": ["entity_type", "entity_id"]
            },
            "minItems": 1,
            "maxItems": 1000,
            "description": "Entities to process"
          },
          "metadata": {
            "type": "object",
            "description": "Additional operation metadata",
            "additionalProperties": true
          }
        },
        "required": ["operation", "entities"]
      },
      "SearchTaxonomyRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Search query"
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by namespaces"
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["draft", "active", "deprecated", "archived"]
            },
            "description": "Filter by status"
          },
          "include_categories": {
            "type": "boolean",
            "default": false,
            "description": "Include category details in response"
          },
          "include_classifications": {
            "type": "boolean",
            "default": false,
            "description": "Include usage statistics"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20,
            "description": "Maximum results to return"
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "description": "Results offset for pagination"
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful"
          },
          "data": {
            "type": "array",
            "items": {},
            "description": "Response data array"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items"
              },
              "limit": {
                "type": "integer",
                "description": "Items per page"
              },
              "offset": {
                "type": "integer",
                "description": "Current offset"
              },
              "has_next": {
                "type": "boolean",
                "description": "Whether there are more items"
              },
              "has_prev": {
                "type": "boolean",
                "description": "Whether there are previous items"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional response metadata",
            "additionalProperties": true
          }
        },
        "required": ["success", "data"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false,
            "description": "Always false for error responses"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code for programmatic handling"
              },
              "message": {
                "type": "string",
                "description": "Human-readable error message"
              },
              "details": {
                "type": "object",
                "description": "Additional error details",
                "additionalProperties": true
              },
              "correlation_id": {
                "type": "string",
                "description": "Request correlation ID for debugging"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Error timestamp"
              }
            },
            "required": ["code", "message", "correlation_id", "timestamp"]
          }
        },
        "required": ["success", "error"]
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Service health check",
        "description": "Returns the current health status of the taxonomy service",
        "security": [],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["healthy", "degraded", "unhealthy"]
                    },
                    "version": {
                      "type": "string"
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": ["healthy", "unhealthy"]
                        },
                        "cache": {
                          "type": "string",
                          "enum": ["healthy", "unhealthy"]
                        },
                        "dependencies": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "enum": ["healthy", "unhealthy"]
                          }
                        }
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": ["status", "version", "timestamp"]
                }
              }
            }
          }
        }
      }
    },
    "/taxonomies": {
      "get": {
        "tags": ["Taxonomies"],
        "summary": "List taxonomies",
        "description": "Retrieve a list of taxonomies with optional filtering",
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "Filter by namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": ["draft", "active", "deprecated", "archived"]
            }
          },
          {
            "name": "include_categories",
            "in": "query",
            "description": "Include category counts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results offset for pagination",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of taxonomies",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaxonomyResponse"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Taxonomies"],
        "summary": "Create taxonomy",
        "description": "Create a new taxonomy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaxonomyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Taxonomy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaxonomyResponse"
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Taxonomy already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taxonomies/{id}": {
      "get": {
        "tags": ["Taxonomies"],
        "summary": "Get taxonomy by ID",
        "description": "Retrieve a specific taxonomy by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Taxonomy ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "include_categories",
            "in": "query",
            "description": "Include all categories in response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaxonomyResponse"
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "404": {
            "description": "Taxonomy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Taxonomies"],
        "summary": "Update taxonomy",
        "description": "Update an existing taxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Taxonomy ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaxonomyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Taxonomy updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaxonomyResponse"
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Taxonomy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Taxonomies"],
        "summary": "Delete taxonomy",
        "description": "Delete a taxonomy (archives if in use)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Taxonomy ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force delete even if in use",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Taxonomy deleted successfully"
          },
          "400": {
            "description": "Bad request - taxonomy in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Taxonomy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "List categories",
        "description": "Retrieve categories with optional filtering and hierarchy",
        "parameters": [
          {
            "name": "taxonomy_id",
            "in": "query",
            "description": "Filter by taxonomy ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter by parent category ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by hierarchy level",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "include_children",
            "in": "query",
            "description": "Include child categories",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "include_usage",
            "in": "query",
            "description": "Include usage statistics",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results offset for pagination",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CategoryResponse"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create category",
        "description": "Create a new category in a taxonomy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/CategoryResponse"
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Category already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classifications": {
      "get": {
        "tags": ["Classifications"],
        "summary": "List classifications",
        "description": "Retrieve entity classifications with optional filtering",
        "parameters": [
          {
            "name": "entity_type",
            "in": "query",
            "description": "Filter by entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_id",
            "in": "query",
            "description": "Filter by entity ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": ["pending", "confirmed", "rejected", "expired"]
            }
          },
          {
            "name": "assigned_by",
            "in": "query",
            "description": "Filter by assignment method",
            "schema": {
              "type": "string",
              "enum": ["system", "user", "ai", "import"]
            }
          },
          {
            "name": "include_category",
            "in": "query",
            "description": "Include full category details",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results offset for pagination",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of classifications",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClassificationResponse"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Classifications"],
        "summary": "Classify entity",
        "description": "Assign categories to an entity",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassifyEntityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Entity classified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClassificationResponse"
                      }
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classifications/ai-classify": {
      "post": {
        "tags": ["Classifications"],
        "summary": "AI-powered entity classification",
        "description": "Use AI to analyze entity content and suggest categories",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIClassifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AI classification suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "entity_type": {
                          "type": "string"
                        },
                        "entity_id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "suggestions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category_id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "category": {
                                "$ref": "#/components/schemas/CategoryResponse"
                              },
                              "confidence_score": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              },
                              "reasoning": {
                                "type": "string",
                                "description": "AI explanation for this suggestion"
                              }
                            }
                          }
                        },
                        "processing_time_ms": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": ["Search"],
        "summary": "Search taxonomies and categories",
        "description": "Full-text search across taxonomies and categories",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Search query",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 200
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Search scope",
            "schema": {
              "type": "string",
              "enum": ["taxonomies", "categories", "all"],
              "default": "all"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Filter by namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Results offset for pagination",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": ["taxonomy", "category"]
                              },
                              "taxonomy": {
                                "$ref": "#/components/schemas/TaxonomyResponse"
                              },
                              "category": {
                                "$ref": "#/components/schemas/CategoryResponse"
                              },
                              "score": {
                                "type": "number",
                                "description": "Search relevance score"
                              },
                              "highlights": {
                                "type": "object",
                                "description": "Search term highlights",
                                "additionalProperties": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bulk": {
      "post": {
        "tags": ["Bulk Operations"],
        "summary": "Bulk operations",
        "description": "Perform bulk operations on classifications",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Bulk operation accepted for processing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Bulk operation job ID"
                        },
                        "status": {
                          "type": "string",
                          "enum": ["queued", "processing"],
                          "description": "Initial job status"
                        },
                        "estimated_completion": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Estimated completion time"
                        },
                        "total_entities": {
                          "type": "integer",
                          "description": "Total number of entities to process"
                        }
                      }
                    }
                  },
                  "required": ["success", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Service health and monitoring endpoints"
    },
    {
      "name": "Taxonomies",
      "description": "Taxonomy management operations"
    },
    {
      "name": "Categories",
      "description": "Category management within taxonomies"
    },
    {
      "name": "Classifications",
      "description": "Entity classification operations"
    },
    {
      "name": "Search",
      "description": "Search and discovery operations"
    },
    {
      "name": "Bulk Operations",
      "description": "Bulk processing operations"
    }
  ],
  "x-rate-limit": {
    "api_rpm": 600,
    "burst": 100,
    "window": "1m"
  },
  "x-slo": {
    "uptime_pct": 99.9,
    "p95_ms_read": 400,
    "p95_ms_write": 700
  }
}
