# Copyright (c) 2025 Eventful India Marketing Services, India
# All rights reserved.
# 
# Service: taxonomy
# Port: 3201
# GitHub Actions CI/CD Pipeline
# Template: Eventzr Code Repository Template v1.0

name: Taxonomy Service CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  SERVICE_NAME: taxonomy
  SERVICE_PORT: 3201
  NODE_VERSION: 20
  AWS_REGION: us-east-1

jobs:
  # Quality Gates
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci --only=production=false

      - name: Generate Prisma client
        run: |
          cd backend
          npm run prisma:generate

      - name: Lint code
        run: |
          cd backend
          npm run lint

      - name: Format check
        run: |
          cd backend
          npm run format:check

      - name: TypeScript compilation
        run: |
          cd backend
          npm run build

      - name: Security audit
        run: |
          cd backend
          npm audit --audit-level=high

      - name: SAST scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: taxonomy
          POSTGRES_PASSWORD: taxonomy123
          POSTGRES_DB: taxonomy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Generate Prisma client
        run: |
          cd backend
          npm run prisma:generate

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://taxonomy:taxonomy123@localhost:5432/taxonomy_test
        run: |
          cd backend
          npm run prisma:migrate:dev

      - name: Run unit tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://taxonomy:taxonomy123@localhost:5432/taxonomy_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          cd backend
          npm run test:cov

      - name: Run integration tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://taxonomy:taxonomy123@localhost:5432/taxonomy_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          cd backend
          npm run test:e2e

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: taxonomy-backend
          fail_ci_if_error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend

  # Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    outputs:
      lambda-artifact: ${{ steps.package.outputs.lambda-artifact }}
      docker-image: ${{ steps.docker.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci --only=production

      - name: Generate Prisma client
        run: |
          cd backend
          npm run prisma:generate

      - name: Build application
        run: |
          cd backend
          npm run build

      - name: Package for Lambda
        id: package
        run: |
          cd backend
          npm run lambda:build
          echo "lambda-artifact=backend/dist/taxonomy-lambda.zip" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Docker image
        id: docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: eventzr/taxonomy
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: backend/dist/taxonomy-lambda.zip
          retention-days: 30

  # Infrastructure Validation
  infrastructure-validate:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build

    strategy:
      matrix:
        cloud: [aws, gcp, azure]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform/${{ matrix.cloud }}
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infrastructure/terraform/${{ matrix.cloud }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform/${{ matrix.cloud }}
          terraform validate

      - name: TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0

      - name: Run TFLint
        run: |
          cd infrastructure/terraform/${{ matrix.cloud }}
          tflint --init
          tflint

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, infrastructure-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: backend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/aws
          terraform init
          terraform workspace select dev || terraform workspace new dev
          terraform plan -var="environment=dev" -var="lambda_zip_path=../../../backend/dist/taxonomy-lambda.zip"
          terraform apply -auto-approve -var="environment=dev" -var="lambda_zip_path=../../../backend/dist/taxonomy-lambda.zip"

      - name: Run deployment tests
        run: |
          # Health check
          sleep 30
          curl -f https://api.dev.eventzr.com/v1/taxonomy/health || exit 1
          
          # Integration tests against deployed service
          cd backend
          npm run test:deployed -- --env=dev

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build, infrastructure-validate]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: backend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/aws
          terraform init
          terraform workspace select staging || terraform workspace new staging
          terraform plan -var="environment=staging" -var="lambda_zip_path=../../../backend/dist/taxonomy-lambda.zip"
          terraform apply -auto-approve -var="environment=staging" -var="lambda_zip_path=../../../backend/dist/taxonomy-lambda.zip"

      - name: Run smoke tests
        run: |
          sleep 60
          curl -f https://api.staging.eventzr.com/v1/taxonomy/health || exit 1
          
          # Performance tests
          cd backend
          npm run test:performance -- --env=staging

      - name: Load testing
        uses: k6-io/k6-action@v0.1
        with:
          filename: backend/test/performance/load-test.js
        env:
          BASE_URL: https://api.staging.eventzr.com/v1/taxonomy

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: backend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Deploy infrastructure (Blue-Green)
        run: |
          cd infrastructure/terraform/aws
          terraform init
          terraform workspace select production || terraform workspace new production
          
          # Blue-green deployment with alias
          terraform plan -var="environment=production" -var="lambda_zip_path=../../../backend/dist/taxonomy-lambda.zip"
          terraform apply -auto-approve -var="environment=production" -var="lambda_zip_path=../../../backend/dist/taxonomy-lambda.zip"

      - name: Health check
        run: |
          sleep 90
          for i in {1..10}; do
            if curl -f https://api.eventzr.com/v1/taxonomy/health; then
              echo "Health check passed"
              break
            fi
            echo "Health check failed, attempt $i/10"
            sleep 30
          done

      - name: Production smoke tests
        run: |
          cd backend
          npm run test:production-smoke

      - name: Update monitoring dashboards
        run: |
          aws cloudwatch put-dashboard --dashboard-name "Eventzr-Production-Taxonomy" --dashboard-body file://infrastructure/monitoring/dashboard.json

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback Lambda alias to previous version
        run: |
          aws lambda update-alias \
            --function-name eventzr-production-taxonomy \
            --name live \
            --function-version $(aws lambda list-versions-by-function --function-name eventzr-production-taxonomy --query 'Versions[-2].Version' --output text)

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://api.eventzr.com/v1/taxonomy/health || exit 1

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#platform-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}



